{"version":3,"sources":["app_components/weather.component.jsx","app_components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","lat","long","temp_celsius","min","max","MinMaxTemp","temp_min","temp_max","weatherIcon","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","coord","lon","get_Weathericon","id","state","undefined","icon","Thunderstorm","Drizzle","Snow","Atmosphere","Clear","Clouds","Math","floor","reangeID","this","Rain","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d668d4d4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Weather = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"cards pt-4\">\n                <div className=\"row\">\n                    <div className=\" col d-inline\">\n                        <div className=\"display-4 pb-2\">{props.city}</div>\n                        {props.lat && props.long ?\n                            (<div>\n                                <p>\n                                    <div className=\" d-inline pl-1\">\n                                        {props.lat}&deg;\n                                        </div>\n                                    <div className=\" d-inline pl-1\">\n                                        {props.long}&deg;\n                                            </div>\n                                </p>\n                            </div>) : null}\n\n                        {props.temp_celsius ? (<div className=\"py-2 display-1\">{props.temp_celsius}&deg;</div>) : null}\n                        {/**show min and max temperature */}\n                        {MinMaxTemp(props.temp_min, props.temp_max)}\n                    </div>\n                    <div className=\"col d-inline t px-5\">\n                        <div className=\"py-4\">\n                            <i className={`wi ${props.weatherIcon} display-1`} />\n                        </div>\n                        <h4 className=\"py-3\">{props.description}</h4>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nfunction MinMaxTemp(min, max) {\n    if (min && max) {\n        return (<h3>\n            <span className=\"pr-4\">{min}&deg;</span>\n            <span className=\"px-4\">{max}&deg;</span>\n\n        </h3>\n        )\n    }\n}\n\nexport default Weather;","import React from 'react';\nimport \"./form.style.css\"\nconst Form = props => {\n    return (\n        <div className=\"container\">\n            <div>{props.error ? error():null}</div>\n            <form onSubmit={props.loadweather}>\n            <div className=\"row\">\n                <div className=\"col-md-3  py-4\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"city\"\n                        autoComplete=\"off\"\n                        placeholder=\"City\"\n                    />\n                </div>\n                <div className=\"col-md-3 py-4\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"country\"\n                        autoComplete=\"off\"\n                        placeholder=\"Country\"\n                    />\n\n                </div>\n                <div className=\"col-md-3 mt-md-0 py-4 text-md-left\">\n                    <button name=\"submit\" className=\"btn\">\n                        Get Weather\n                    </button>\n                </div>\n            </div>\n            </form>\n        </div>\n    );\n};\n\nfunction error(){\n    return(\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">Please enter city and country</div>\n    )\n}\n\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Weather from './app_components/weather.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './app_components/form.component'\n//Api call api.openweathermap.org/data/2.5/weather?q=London,uk\n\n\nconst API_key = \"9747f5aa0dc4ef37a97b710f92fe88f3\"\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false,\n      lat: undefined,\n      long: undefined\n    };\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor((temp - 273.15)*(9/5) +32)\n    return cell;\n  }\n\n  get_Weathericon(icon, reangeID) {\n    switch (true) {\n      case reangeID >= 200 && reangeID <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case reangeID >= 300 && reangeID <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case reangeID >= 500 && reangeID <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case reangeID >= 600 && reangeID <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case reangeID >= 701 && reangeID <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case reangeID === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case reangeID >= 801 && reangeID <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds })\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n\n    if (city && country) {\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n      );\n\n      const response = await api_call.json();\n      console.log(response);\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error:false,\n        lat: response.coord.lat,\n        long:response.coord.lon\n\n      })\n      this.get_Weathericon(this.weatherIcon, response.weather[0].id)\n    }else{\n      this.setState({error:true});\n    }\n\n  }\n\n  state = {}\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error}/>\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n          lat={this.state.lat}\n          long={this.state.long}\n\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}